// Code generated by MockGen. DO NOT EDIT.
// Source: dependency.go
//
// Generated by this command:
//
//	mockgen -package api -destination mock_dependency_test.go -source dependency.go
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	auth "github.com/hareku/habit-tracker-app/internal/auth"
	repository "github.com/hareku/habit-tracker-app/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockDynamoRepository is a mock of DynamoRepository interface.
type MockDynamoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoRepositoryMockRecorder
}

// MockDynamoRepositoryMockRecorder is the mock recorder for MockDynamoRepository.
type MockDynamoRepositoryMockRecorder struct {
	mock *MockDynamoRepository
}

// NewMockDynamoRepository creates a new mock instance.
func NewMockDynamoRepository(ctrl *gomock.Controller) *MockDynamoRepository {
	mock := &MockDynamoRepository{ctrl: ctrl}
	mock.recorder = &MockDynamoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoRepository) EXPECT() *MockDynamoRepositoryMockRecorder {
	return m.recorder
}

// AllArchivedHabits mocks base method.
func (m *MockDynamoRepository) AllArchivedHabits(ctx context.Context, uid auth.UserID) ([]*repository.DynamoHabit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllArchivedHabits", ctx, uid)
	ret0, _ := ret[0].([]*repository.DynamoHabit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllArchivedHabits indicates an expected call of AllArchivedHabits.
func (mr *MockDynamoRepositoryMockRecorder) AllArchivedHabits(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllArchivedHabits", reflect.TypeOf((*MockDynamoRepository)(nil).AllArchivedHabits), ctx, uid)
}

// AllHabits mocks base method.
func (m *MockDynamoRepository) AllHabits(ctx context.Context, uid auth.UserID) ([]*repository.DynamoHabit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllHabits", ctx, uid)
	ret0, _ := ret[0].([]*repository.DynamoHabit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllHabits indicates an expected call of AllHabits.
func (mr *MockDynamoRepositoryMockRecorder) AllHabits(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllHabits", reflect.TypeOf((*MockDynamoRepository)(nil).AllHabits), ctx, uid)
}

// ArchiveHabit mocks base method.
func (m *MockDynamoRepository) ArchiveHabit(ctx context.Context, uid auth.UserID, hid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveHabit", ctx, uid, hid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveHabit indicates an expected call of ArchiveHabit.
func (mr *MockDynamoRepositoryMockRecorder) ArchiveHabit(ctx, uid, hid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveHabit", reflect.TypeOf((*MockDynamoRepository)(nil).ArchiveHabit), ctx, uid, hid)
}

// CreateCheck mocks base method.
func (m *MockDynamoRepository) CreateCheck(ctx context.Context, uid auth.UserID, hid uuid.UUID, date string) (*repository.DynamoCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheck", ctx, uid, hid, date)
	ret0, _ := ret[0].(*repository.DynamoCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheck indicates an expected call of CreateCheck.
func (mr *MockDynamoRepositoryMockRecorder) CreateCheck(ctx, uid, hid, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheck", reflect.TypeOf((*MockDynamoRepository)(nil).CreateCheck), ctx, uid, hid, date)
}

// CreateHabit mocks base method.
func (m *MockDynamoRepository) CreateHabit(ctx context.Context, uid auth.UserID, title string) (*repository.DynamoHabit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHabit", ctx, uid, title)
	ret0, _ := ret[0].(*repository.DynamoHabit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHabit indicates an expected call of CreateHabit.
func (mr *MockDynamoRepositoryMockRecorder) CreateHabit(ctx, uid, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHabit", reflect.TypeOf((*MockDynamoRepository)(nil).CreateHabit), ctx, uid, title)
}

// DeleteCheck mocks base method.
func (m *MockDynamoRepository) DeleteCheck(ctx context.Context, uid auth.UserID, hid uuid.UUID, date string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCheck", ctx, uid, hid, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCheck indicates an expected call of DeleteCheck.
func (mr *MockDynamoRepositoryMockRecorder) DeleteCheck(ctx, uid, hid, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCheck", reflect.TypeOf((*MockDynamoRepository)(nil).DeleteCheck), ctx, uid, hid, date)
}

// DeleteHabit mocks base method.
func (m *MockDynamoRepository) DeleteHabit(ctx context.Context, uid auth.UserID, hid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHabit", ctx, uid, hid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHabit indicates an expected call of DeleteHabit.
func (mr *MockDynamoRepositoryMockRecorder) DeleteHabit(ctx, uid, hid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHabit", reflect.TypeOf((*MockDynamoRepository)(nil).DeleteHabit), ctx, uid, hid)
}

// FindArchivedHabit mocks base method.
func (m *MockDynamoRepository) FindArchivedHabit(ctx context.Context, uid auth.UserID, hid uuid.UUID) (*repository.DynamoHabit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArchivedHabit", ctx, uid, hid)
	ret0, _ := ret[0].(*repository.DynamoHabit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindArchivedHabit indicates an expected call of FindArchivedHabit.
func (mr *MockDynamoRepositoryMockRecorder) FindArchivedHabit(ctx, uid, hid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArchivedHabit", reflect.TypeOf((*MockDynamoRepository)(nil).FindArchivedHabit), ctx, uid, hid)
}

// FindHabit mocks base method.
func (m *MockDynamoRepository) FindHabit(ctx context.Context, uid auth.UserID, hid uuid.UUID) (*repository.DynamoHabit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHabit", ctx, uid, hid)
	ret0, _ := ret[0].(*repository.DynamoHabit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHabit indicates an expected call of FindHabit.
func (mr *MockDynamoRepositoryMockRecorder) FindHabit(ctx, uid, hid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHabit", reflect.TypeOf((*MockDynamoRepository)(nil).FindHabit), ctx, uid, hid)
}

// ListLastWeekChecksInAllHabits mocks base method.
func (m *MockDynamoRepository) ListLastWeekChecksInAllHabits(ctx context.Context, uid auth.UserID) ([]*repository.DynamoCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLastWeekChecksInAllHabits", ctx, uid)
	ret0, _ := ret[0].([]*repository.DynamoCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLastWeekChecksInAllHabits indicates an expected call of ListLastWeekChecksInAllHabits.
func (mr *MockDynamoRepositoryMockRecorder) ListLastWeekChecksInAllHabits(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLastWeekChecksInAllHabits", reflect.TypeOf((*MockDynamoRepository)(nil).ListLastWeekChecksInAllHabits), ctx, uid)
}

// ListLatestChecksWithLimit mocks base method.
func (m *MockDynamoRepository) ListLatestChecksWithLimit(ctx context.Context, uid auth.UserID, hid uuid.UUID, limit int32) ([]*repository.DynamoCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLatestChecksWithLimit", ctx, uid, hid, limit)
	ret0, _ := ret[0].([]*repository.DynamoCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLatestChecksWithLimit indicates an expected call of ListLatestChecksWithLimit.
func (mr *MockDynamoRepositoryMockRecorder) ListLatestChecksWithLimit(ctx, uid, hid, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLatestChecksWithLimit", reflect.TypeOf((*MockDynamoRepository)(nil).ListLatestChecksWithLimit), ctx, uid, hid, limit)
}

// UnarchiveHabit mocks base method.
func (m *MockDynamoRepository) UnarchiveHabit(ctx context.Context, uid auth.UserID, hid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnarchiveHabit", ctx, uid, hid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnarchiveHabit indicates an expected call of UnarchiveHabit.
func (mr *MockDynamoRepositoryMockRecorder) UnarchiveHabit(ctx, uid, hid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveHabit", reflect.TypeOf((*MockDynamoRepository)(nil).UnarchiveHabit), ctx, uid, hid)
}

// UpdateHabit mocks base method.
func (m *MockDynamoRepository) UpdateHabit(ctx context.Context, in *repository.DynamoRepositoryUpdateHabitInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHabit", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHabit indicates an expected call of UpdateHabit.
func (mr *MockDynamoRepositoryMockRecorder) UpdateHabit(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHabit", reflect.TypeOf((*MockDynamoRepository)(nil).UpdateHabit), ctx, in)
}
