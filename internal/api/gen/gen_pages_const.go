//go:generate go run .

package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/hareku/habit-tracker-app/internal/api"
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	pages := api.ListPages()
	log.Printf("Found pages: %+v\n", pages)

	if err := generatePagesConst(pages); err != nil {
		return fmt.Errorf("generate pages const: %w", err)
	}

	return nil
}

func generatePagesConst(pages []string) error {
	type Page struct {
		Name     string
		FileName string
	}
	tmplPages := make([]Page, 0, len(pages))
	for _, page := range pages {
		tmplPages = append(tmplPages, Page{
			Name:     strings.ToUpper(page[:1]) + strings.TrimSuffix(page[1:], ".html"),
			FileName: page,
		})
	}

	tmpl, err := template.New("gen_pages").Parse(`// Code generated by go generate; DO NOT EDIT.
package api

type TypeTemplatePage string
{{range .Pages}}
const TemplatePage{{.Name}} TypeTemplatePage = "{{.FileName}}"{{end}}
`)
	if err != nil {
		return fmt.Errorf("parse template: %w", err)
	}

	f, err := os.Create("../gen_pages_const.go")
	if err != nil {
		return fmt.Errorf("create file: %w", err)
	}
	defer f.Close()

	if err := tmpl.Execute(f, map[string]interface{}{
		"Pages": tmplPages,
	}); err != nil {
		return fmt.Errorf("execute template: %w", err)
	}
	return nil
}
